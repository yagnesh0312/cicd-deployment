apiVersion: batch/v1
kind: Job
metadata:
  name: myjob
  namespace: deploy-test
spec:
  backoffLimit: 0
  template:
    spec:
      containers:
        - args:
            - |
              status=0
              sleep 2
              echo "Job Started !!"
              while [ $status -eq 0 ]; do
                  kubectl get pods -n deploy-test
                  
                  # Extract container-level status reasons
                  data=$(kubectl get pods -n deploy-test -o jsonpath='{.items[*].status.containerStatuses[*].state.waiting.reason}')
                  echo "Pod Statuses: $data"
                  
                  if echo "$data" | grep -q "ErrImagePull"; then
                      echo "Exiting due to ErrImagePull"
                      exit 1
                  elif echo "$data" | grep -q "CrashLoopBackOff"; then
                      echo "Exiting due to CrashLoopBackOff"
                      exit 1
                  elif echo "$data" | grep -q "ImagePullBackOff"; then
                      echo "Exiting due to ImagePullBackOff"
                      exit 1
                  elif echo "$data" | grep -q "Error"; then
                      echo "Exiting due to Error"
                      exit 1
                  elif echo "$data" | grep -q "Failed"; then
                      echo "Exiting due to Failed"
                      exit 1
                  elif echo "$data" | grep -q "ContainerCreating"; then
                      echo "Containers are still creating... Waiting"
                      sleep 5
                  elif [ -z "$data" ]; then
                      status=1
                      echo "Success: No issues detected"
                  else
                      echo "Still Pending... Waiting"
                      sleep 5
                  fi
              done

              # Check if the service is running on the specified port
              echo "Checking if service is running on my-production-svc-test.deploy-test.svc.cluster.local:31112..."
              curl my-production-svc-test.deploy-test.svc.cluster.local:31112
              if [ $? -eq 0 ]; then
                  echo "Service is running on port 31112"
              else
                  echo "Error: Service is not running on port 31112"
                  exit 1
              fi

              exit 0
          command:
            - bash
            - '-c'
          image: bitnami/kubectl
          name: myjob
          volumeMounts:
            - mountPath: /.kube
              name: kubectl-config
        - name: checkurl
      restartPolicy: Never
      volumes:
        - hostPath:
            path: /root/.kube
          name: kubectl-config
