name: Docker Image Build and Deployment

on:
  push:
    tags:
        - 'v*.*.*'

  workflow_dispatch:

env:
  HARBOR_REGISTRY: harbor.harsh.com:30002
  HARBOR_IMAGE_NAME: inventyv/production
  HARBOR_USERNAME: ${{ secrets.HARSH_DOCKER_USERNAME }}
  HARBOR_PASSWORD: ${{ secrets.HARSH_DOCKER_PASSWORD }}

  GCP_PROJECT_ID: ${{ secrets.HARSH_GCP_PROJECT_ID }}
  PUBSUB_TOPIC: ${{ secrets.HARSH_PUBSUB_TOPIC }}
  PUBSUB_CREDENTIALS: ${{ secrets.HARSH_PUBSUB_CRED }}

  MONGO_CONN_STRING: ${{ secrets.HARSH_MONGO_CONN_STRING }}
  MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
  MONGO_COLLECTION_NAME: ${{ secrets.MONGO_COLLECTION_NAME }}

  PORT: ${{ secrets.PORT }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  build:
    runs-on: harsh-runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Get Release Version
        run: |
          echo ${GITHUB_REF#refs/*} >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          LATEST_VERSION_TAG=${{ env.RELEASE_VERSION }}
          echo "Latest tag is $LATEST_VERSION_TAG"

      - name: Check if Version Already Exists
        run: |
          if command docker pull ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:$LATEST_VERSION_TAG ; then
            echo "Error: Image version ${{ env.RELEASE_VERSION }} already exists in the registry."
            exit 1
          fi

      - name: Test Docker Image Generated and Run Tests
        run: |
          docker image rm cicd-test || echo "No image to remove"
          docker rm cicd-test || echo "No container to remove"
          docker build -t cicd-test -f Dockerfile.test .
          docker container run --name cicd-test \
            -e MONGO_CONN_STRING=${{ env.MONGO_CONN_STRING }} \
            -e MONGO_DB_NAME=${{ env.MONGO_DB_NAME }} \
            -e MONGO_COLLECTION_NAME=${{ env.MONGO_COLLECTION_NAME }} \
            -e PORT=${{ env.PORT }} \
            -e VERSION=${{ env.VERSION }} \
            -e SECRET_KEY=${{ env.SECRET_KEY }} \
            cicd-test
          docker wait cicd-test
          if [ $? -eq 0 ]; then
            echo "Test Passed"
          else
            echo "Test Failed"
            exit 1
          fi

      - name: Log in to Docker Registry
        run: echo "${{ env.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} -u "${{ env.HARBOR_USERNAME }}" --password-stdin

      - name: Pull Old Image (if exists)
        continue-on-error: true
        run: docker pull ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:latest || echo "No existing image found"

      - name: Remove Old Image (if exists)
        continue-on-error: true
        run: docker rmi ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:latest || echo "No old image to remove"

      - name: Build the Docker Image
        run: |
          docker build -t ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:latest .
          docker tag ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:latest ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

      - name: Push Docker Image
        run: |
          docker push ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:latest
          docker push ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

      - name: Cleanup
        run: |
          docker image rm -f ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:latest
          docker image rm -f ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.PUBSUB_CREDENTIALS }}

      - name: Publish a message to Google Cloud Pub/Sub
        uses: miraliumre/actions-pubsub@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          topic_name: ${{ env.PUBSUB_TOPIC }}
          message: '{"type":"production", "version": "${{ env.RELEASE_VERSION }}"}'
